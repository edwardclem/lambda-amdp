[P-T2] [P-T2] Set: DYNSKIP -> -1.0
[P-T2] [P-T2] Adding entry: nearest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3)))))
[P-T2] [P-T2] Adding entry: block :- N : (lambda $0:e (block:<e,t> $0))
[P-T2] [P-T2] Adding entry: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2))))
[P-T2] [P-T2] Adding entry: go to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0))
[P-T2] [P-T2] Adding entry: move to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0))
[P-T2] [P-T2] Adding entry: go to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0))
[P-T2] [P-T2] Adding entry: closest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3)))))
[P-T2] [P-T2] Adding entry: smallest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2))))
[P-T2] [P-T2] Adding entry: smallest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2))))
[P-T2] [P-T2] Adding entry: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2))))
[P-T2] [P-T2] Adding entry: move to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0))
[P-T2] [P-T2] Adding entry: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2))))
[P-T2] [P-T2] Adding entry: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2))))
[P-T2] [P-T2] Adding entry: in :- PP/NP : (lambda $0:e (lambda $1:e (in:<e,<e,t>> $1 $0)))
[P-T2] [P-T2] Adding entry: nearest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3)))))
[P-T2] [P-T2] Adding entry: please :- S\S : (lambda $0:t $0)
[P-T2] [P-T2] Adding entry: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2))))
[P-T2] [P-T2] Adding entry: smallest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2))))
[P-T2] [P-T2] Adding entry: largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2))))
[P-T2] [P-T2] Adding entry: agent :- N : (lambda $0:e (agent:<e,t> $0))
[P-T2] [P-T2] Adding entry: put :- S/PP/NP : (lambda $0:e (lambda $1:<e,t> ($1 $0)))
[P-T2] [P-T2] Adding entry: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2))))
[P-T2] [P-T2] Adding entry: nearest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3)))))
[P-T2] [P-T2] Adding entry: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2))))
[P-T2] [P-T2] Adding entry: room :- N : (lambda $0:e (room:<e,t> $0))
[P-T2] [P-T2] Adding entry: the :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1)))
[P-T2] [P-T2] Adding entry: can you :- S/S : (lambda $0:t $0)
[P-T2] [P-T2] Adding entry: closest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3)))))
[P-T2] [P-T2] Adding entry: blue :- N/N : (lambda $0:<e,t> (lambda $1:e (and:<t*,t> (blue:<e,t> $1) ($0 $1))))
[P-T2] [P-T2] Adding entry: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2))))
[P-T2] [P-T2] Adding entry: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2))))
[P-T2] [P-T2] Adding entry: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2))))
[P-T2] [P-T2] Adding entry: largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2))))
[P-T2] [P-T2] Adding entry: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2))))
[P-T2] [P-T2] Adding entry: closest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3)))))
[P-T2] [P-T2] Adding entry: can you :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1)))
[P-T2] [P-T2] Adding entry: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2))))
[P-T2] [P-T2] Adding entry: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2))))
[P-T2] [P-T2] Adding entry: move to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0))
[P-T2] [P-T2] Adding entry: largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2))))
[P-T2] [P-T2] Adding entry: go to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0))
[P-T2] [P-T2] Adding entry: red :- N/N : (lambda $0:<e,t> (lambda $1:e (and:<t*,t> (red:<e,t> $1) ($0 $1))))
[P-T2] [P-T2] Adding entry: the :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1))))
[P-T2] [P-T2] Adding entry: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2))))
[P-T2] [P-T2] Init FACLEX#LEX: nearest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3))))) -> {FACLEX#LEX#30#24=21.435(1.000),FACLEX#TMP#24=0.000(0.100),FACLEX#XEME#30=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: block :- N : (lambda $0:e (block:<e,t> $0)) -> {FACLEX#LEX#3#2=10.000(1.000),FACLEX#TMP#2=0.000(0.100),FACLEX#XEME#3=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#4#3=10.000(1.000),FACLEX#TMP#3=0.000(0.100),FACLEX#XEME#4=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: go to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0)) -> {FACLEX#LEX#5#4=21.435(1.000),FACLEX#TMP#4=0.000(0.100),FACLEX#XEME#5=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: move to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0)) -> {FACLEX#LEX#40#4=21.435(1.000),FACLEX#TMP#4=0.000(0.100),FACLEX#XEME#40=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: go to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0)) -> {FACLEX#LEX#32#19=21.435(1.000),FACLEX#TMP#19=0.000(0.100),FACLEX#XEME#32=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: closest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3))))) -> {FACLEX#LEX#13#16=21.435(1.000),FACLEX#TMP#16=0.000(0.100),FACLEX#XEME#13=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: smallest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2)))) -> {FACLEX#LEX#22#10=10.000(1.000),FACLEX#TMP#10=0.000(0.100),FACLEX#XEME#22=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: smallest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2)))) -> {FACLEX#LEX#33#23=10.000(1.000),FACLEX#TMP#23=0.000(0.100),FACLEX#XEME#33=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#34#15=10.000(1.000),FACLEX#TMP#15=0.000(0.100),FACLEX#XEME#34=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: move to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0)) -> {FACLEX#LEX#23#19=21.435(1.000),FACLEX#TMP#19=0.000(0.100),FACLEX#XEME#23=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#35#7=10.000(1.000),FACLEX#TMP#7=0.000(0.100),FACLEX#XEME#35=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#1#0=10.000(1.000),FACLEX#TMP#0=0.000(0.100),FACLEX#XEME#1=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: in :- PP/NP : (lambda $0:e (lambda $1:e (in:<e,<e,t>> $1 $0))) -> {FACLEX#LEX#12#20=10.000(1.000),FACLEX#TMP#20=0.000(0.100),FACLEX#XEME#12=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: nearest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3))))) -> {FACLEX#LEX#6#5=21.435(1.000),FACLEX#TMP#5=0.000(0.100),FACLEX#XEME#6=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: please :- S\S : (lambda $0:t $0) -> {FACLEX#LEX#8#17=10.000(1.000),FACLEX#TMP#17=0.000(0.100),FACLEX#XEME#8=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#7#7=10.000(1.000),FACLEX#TMP#7=0.000(0.100),FACLEX#XEME#7=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: smallest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2)))) -> {FACLEX#LEX#36#18=10.000(1.000),FACLEX#TMP#18=0.000(0.100),FACLEX#XEME#36=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2)))) -> {FACLEX#LEX#37#23=10.000(1.000),FACLEX#TMP#23=0.000(0.100),FACLEX#XEME#37=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: agent :- N : (lambda $0:e (agent:<e,t> $0)) -> {FACLEX#LEX#31#2=10.000(1.000),FACLEX#TMP#2=0.000(0.100),FACLEX#XEME#31=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: put :- S/PP/NP : (lambda $0:e (lambda $1:<e,t> ($1 $0))) -> {FACLEX#LEX#21#21=10.000(1.000),FACLEX#TMP#21=0.000(0.100),FACLEX#XEME#21=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#38#3=10.000(1.000),FACLEX#TMP#3=0.000(0.100),FACLEX#XEME#38=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: nearest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3))))) -> {FACLEX#LEX#26#16=21.435(1.000),FACLEX#TMP#16=0.000(0.100),FACLEX#XEME#26=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#25#0=10.000(1.000),FACLEX#TMP#0=0.000(0.100),FACLEX#XEME#25=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: room :- N : (lambda $0:e (room:<e,t> $0)) -> {FACLEX#LEX#10#2=10.000(1.000),FACLEX#TMP#2=0.000(0.100),FACLEX#XEME#10=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: the :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) -> {FACLEX#LEX#11#11=10.000(1.000),FACLEX#TMP#11=0.000(0.100),FACLEX#XEME#11=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: can you :- S/S : (lambda $0:t $0) -> {FACLEX#LEX#15#13=21.435(1.000),FACLEX#TMP#13=0.000(0.100),FACLEX#XEME#15=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: closest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3))))) -> {FACLEX#LEX#28#5=21.435(1.000),FACLEX#TMP#5=0.000(0.100),FACLEX#XEME#28=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: blue :- N/N : (lambda $0:<e,t> (lambda $1:e (and:<t*,t> (blue:<e,t> $1) ($0 $1)))) -> {FACLEX#LEX#0#6=10.000(1.000),FACLEX#TMP#6=0.000(0.100),FACLEX#XEME#0=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#9#9=10.000(1.000),FACLEX#TMP#9=0.000(0.100),FACLEX#XEME#9=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#39#25=10.000(1.000),FACLEX#TMP#25=0.000(0.100),FACLEX#XEME#39=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#14#12=10.000(1.000),FACLEX#TMP#12=0.000(0.100),FACLEX#XEME#14=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2)))) -> {FACLEX#LEX#24#10=10.000(1.000),FACLEX#TMP#10=0.000(0.100),FACLEX#XEME#24=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#41#25=10.000(1.000),FACLEX#TMP#25=0.000(0.100),FACLEX#XEME#41=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: closest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3))))) -> {FACLEX#LEX#27#24=21.435(1.000),FACLEX#TMP#24=0.000(0.100),FACLEX#XEME#27=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: can you :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) -> {FACLEX#LEX#15#14=21.435(1.000),FACLEX#TMP#14=0.000(0.100),FACLEX#XEME#15=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#16#15=10.000(1.000),FACLEX#TMP#15=0.000(0.100),FACLEX#XEME#16=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#17#12=10.000(1.000),FACLEX#TMP#12=0.000(0.100),FACLEX#XEME#17=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: move to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0)) -> {FACLEX#LEX#18#1=21.435(1.000),FACLEX#TMP#1=0.000(0.100),FACLEX#XEME#18=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2)))) -> {FACLEX#LEX#20#22=10.000(1.000),FACLEX#TMP#22=0.000(0.100),FACLEX#XEME#20=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: go to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0)) -> {FACLEX#LEX#2#1=21.435(1.000),FACLEX#TMP#1=0.000(0.100),FACLEX#XEME#2=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: red :- N/N : (lambda $0:<e,t> (lambda $1:e (and:<t*,t> (red:<e,t> $1) ($0 $1)))) -> {FACLEX#LEX#19#6=10.000(1.000),FACLEX#TMP#6=0.000(0.100),FACLEX#XEME#19=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: the :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) -> {FACLEX#LEX#11#8=10.000(1.000),FACLEX#TMP#8=0.000(0.100),FACLEX#XEME#11=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#LEX: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#29#9=10.000(1.000),FACLEX#TMP#9=0.000(0.100),FACLEX#XEME#29=0.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: nearest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3))))) -> {FACLEX#LEX#30#24=21.435(1.000),FACLEX#TMP#24=0.000(0.100),FACLEX#XEME#30=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: block :- N : (lambda $0:e (block:<e,t> $0)) -> {FACLEX#LEX#3#2=10.000(1.000),FACLEX#TMP#2=0.000(0.100),FACLEX#XEME#3=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#4#3=10.000(1.000),FACLEX#TMP#3=0.000(0.100),FACLEX#XEME#4=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: go to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0)) -> {FACLEX#LEX#5#4=21.435(1.000),FACLEX#TMP#4=0.000(0.100),FACLEX#XEME#5=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: move to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0)) -> {FACLEX#LEX#40#4=21.435(1.000),FACLEX#TMP#4=0.000(0.100),FACLEX#XEME#40=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: go to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0)) -> {FACLEX#LEX#32#19=21.435(1.000),FACLEX#TMP#19=0.000(0.100),FACLEX#XEME#32=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: closest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3))))) -> {FACLEX#LEX#13#16=21.435(1.000),FACLEX#TMP#16=0.000(0.100),FACLEX#XEME#13=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: smallest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2)))) -> {FACLEX#LEX#22#10=10.000(1.000),FACLEX#TMP#10=0.000(0.100),FACLEX#XEME#22=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: smallest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2)))) -> {FACLEX#LEX#33#23=10.000(1.000),FACLEX#TMP#23=0.000(0.100),FACLEX#XEME#33=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#34#15=10.000(1.000),FACLEX#TMP#15=0.000(0.100),FACLEX#XEME#34=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: move to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0)) -> {FACLEX#LEX#23#19=21.435(1.000),FACLEX#TMP#19=0.000(0.100),FACLEX#XEME#23=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#35#7=10.000(1.000),FACLEX#TMP#7=0.000(0.100),FACLEX#XEME#35=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#1#0=10.000(1.000),FACLEX#TMP#0=0.000(0.100),FACLEX#XEME#1=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: in :- PP/NP : (lambda $0:e (lambda $1:e (in:<e,<e,t>> $1 $0))) -> {FACLEX#LEX#12#20=10.000(1.000),FACLEX#TMP#20=0.000(0.100),FACLEX#XEME#12=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: nearest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3))))) -> {FACLEX#LEX#6#5=21.435(1.000),FACLEX#TMP#5=0.000(0.100),FACLEX#XEME#6=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: please :- S\S : (lambda $0:t $0) -> {FACLEX#LEX#8#17=10.000(1.000),FACLEX#TMP#17=0.000(0.100),FACLEX#XEME#8=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#7#7=10.000(1.000),FACLEX#TMP#7=0.000(0.100),FACLEX#XEME#7=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: smallest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2)))) -> {FACLEX#LEX#36#18=10.000(1.000),FACLEX#TMP#18=0.000(0.100),FACLEX#XEME#36=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2)))) -> {FACLEX#LEX#37#23=10.000(1.000),FACLEX#TMP#23=0.000(0.100),FACLEX#XEME#37=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: agent :- N : (lambda $0:e (agent:<e,t> $0)) -> {FACLEX#LEX#31#2=10.000(1.000),FACLEX#TMP#2=0.000(0.100),FACLEX#XEME#31=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: put :- S/PP/NP : (lambda $0:e (lambda $1:<e,t> ($1 $0))) -> {FACLEX#LEX#21#21=10.000(1.000),FACLEX#TMP#21=0.000(0.100),FACLEX#XEME#21=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#38#3=10.000(1.000),FACLEX#TMP#3=0.000(0.100),FACLEX#XEME#38=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: nearest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3))))) -> {FACLEX#LEX#26#16=21.435(1.000),FACLEX#TMP#16=0.000(0.100),FACLEX#XEME#26=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#25#0=10.000(1.000),FACLEX#TMP#0=0.000(0.100),FACLEX#XEME#25=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: room :- N : (lambda $0:e (room:<e,t> $0)) -> {FACLEX#LEX#10#2=10.000(1.000),FACLEX#TMP#2=0.000(0.100),FACLEX#XEME#10=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: the :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) -> {FACLEX#LEX#11#11=10.000(1.000),FACLEX#TMP#11=0.000(0.100),FACLEX#XEME#11=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: can you :- S/S : (lambda $0:t $0) -> {FACLEX#LEX#15#13=21.435(1.000),FACLEX#TMP#13=0.000(0.100),FACLEX#XEME#15=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: closest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3))))) -> {FACLEX#LEX#28#5=21.435(1.000),FACLEX#TMP#5=0.000(0.100),FACLEX#XEME#28=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: blue :- N/N : (lambda $0:<e,t> (lambda $1:e (and:<t*,t> (blue:<e,t> $1) ($0 $1)))) -> {FACLEX#LEX#0#6=10.000(1.000),FACLEX#TMP#6=0.000(0.100),FACLEX#XEME#0=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#9#9=10.000(1.000),FACLEX#TMP#9=0.000(0.100),FACLEX#XEME#9=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#39#25=10.000(1.000),FACLEX#TMP#25=0.000(0.100),FACLEX#XEME#39=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#14#12=10.000(1.000),FACLEX#TMP#12=0.000(0.100),FACLEX#XEME#14=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2)))) -> {FACLEX#LEX#24#10=10.000(1.000),FACLEX#TMP#10=0.000(0.100),FACLEX#XEME#24=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#41#25=10.000(1.000),FACLEX#TMP#25=0.000(0.100),FACLEX#XEME#41=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: closest to :- NP\N/NP : (lambda $0:e (lambda $1:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $2:e ($1 $2)) (lambda $3:e (dist:<e,<e,n>> $0 $3))))) -> {FACLEX#LEX#27#24=21.435(1.000),FACLEX#TMP#24=0.000(0.100),FACLEX#XEME#27=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: can you :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) -> {FACLEX#LEX#15#14=21.435(1.000),FACLEX#TMP#14=0.000(0.100),FACLEX#XEME#15=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#16#15=10.000(1.000),FACLEX#TMP#15=0.000(0.100),FACLEX#XEME#16=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: nearest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#17#12=10.000(1.000),FACLEX#TMP#12=0.000(0.100),FACLEX#XEME#17=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: move to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0)) -> {FACLEX#LEX#18#1=21.435(1.000),FACLEX#TMP#1=0.000(0.100),FACLEX#XEME#18=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<e,n> $2)))) -> {FACLEX#LEX#20#22=10.000(1.000),FACLEX#TMP#22=0.000(0.100),FACLEX#XEME#20=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: go to :- S/NP : (lambda $0:e (in:<e,<e,t>> (the:<<e,t>,e> (lambda $1:e (agent:<e,t> $1))) $0)) -> {FACLEX#LEX#2#1=21.435(1.000),FACLEX#TMP#1=0.000(0.100),FACLEX#XEME#2=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: red :- N/N : (lambda $0:<e,t> (lambda $1:e (and:<t*,t> (red:<e,t> $1) ($0 $1)))) -> {FACLEX#LEX#19#6=10.000(1.000),FACLEX#TMP#6=0.000(0.100),FACLEX#XEME#19=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: the :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) -> {FACLEX#LEX#11#8=10.000(1.000),FACLEX#TMP#8=0.000(0.100),FACLEX#XEME#11=10.000(1.000)}
[P-T2] [P-T2] Init FACLEX#XEME: closest :- NP\N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,n>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (dist:<e,<e,n>> (the:<<e,t>,e> (lambda $3:e (agent:<e,t> $3))) $2)))) -> {FACLEX#LEX#29#9=10.000(1.000),FACLEX#TMP#9=0.000(0.100),FACLEX#XEME#29=10.000(1.000)}
